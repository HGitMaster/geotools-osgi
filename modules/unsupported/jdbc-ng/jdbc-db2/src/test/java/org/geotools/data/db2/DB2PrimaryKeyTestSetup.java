package org.geotools.data.db2;

import java.sql.Connection;
import java.sql.SQLException;

import org.geotools.jdbc.JDBCPrimaryKeyTestSetup;


public class DB2PrimaryKeyTestSetup extends JDBCPrimaryKeyTestSetup {

    protected DB2PrimaryKeyTestSetup() {
        super(new  DB2TestSetup());
        
    }

    @Override
    protected void createAutoGeneratedPrimaryKeyTable() throws Exception {
    	Connection con = getDataSource().getConnection();
    	
    	String stmt = "create table "+DB2TestUtil.SCHEMA_QUOTED+
    			".\"auto\" (\"key\" int generated always as identity (start with 1, increment by 1),\"name\" varchar(255),  \"geom\" DB2GSE.ST_GEOMETRY, primary key (\"key\"))";
  	   con.prepareStatement(stmt	).execute();	
    	DB2Util.executeRegister(DB2TestUtil.SCHEMA, "auto", "geom", DB2TestUtil.SRSNAME, con);
    	
        con.prepareStatement( "INSERT INTO "+DB2TestUtil.SCHEMA_QUOTED+".\"auto\" (\"name\",\"geom\")  VALUES ('one',NULL)" ).execute();
        con.prepareStatement( "INSERT INTO "+DB2TestUtil.SCHEMA_QUOTED+".\"auto\" (\"name\",\"geom\")  VALUES ('two',NULL)" ).execute();
        con.prepareStatement( "INSERT INTO "+DB2TestUtil.SCHEMA_QUOTED+".\"auto\" (\"name\",\"geom\")  VALUES ('three',NULL)" ).execute();
        
        con.close();

    }

    private String getSquenceName() {
    	return "seq_key_SEQUENCE";
    }
    
    private String getSquenceNameQuoted() {
    	return DB2TestUtil.SCHEMA_QUOTED+".\""+getSquenceName()+"\"";
    }
    
    @Override
    protected void createSequencedPrimaryKeyTable() throws Exception {
         
        Connection con = getDataSource().getConnection();
        con.prepareStatement("CREATE SEQUENCE "+getSquenceNameQuoted()+ " AS INTEGER  start with 1").execute();
    	con.prepareStatement("create table "+DB2TestUtil.SCHEMA_QUOTED+
    			".\"seq\" (\"key\" int not null,\"name\" varchar(255),  \"geom\" DB2GSE.ST_GEOMETRY, primary key (\"key\"))").execute();
    	DB2Util.executeRegister(DB2TestUtil.SCHEMA, "seq", "geom", DB2TestUtil.SRSNAME, con);
    	
        con.prepareStatement( "INSERT INTO "+DB2TestUtil.SCHEMA_QUOTED+".\"seq\" VALUES (next value for "+getSquenceNameQuoted()+",'one',NULL)" ).execute();
        con.prepareStatement( "INSERT INTO "+DB2TestUtil.SCHEMA_QUOTED+".\"seq\" VALUES (next value for "+getSquenceNameQuoted()+",'two',NULL)" ).execute();
        con.prepareStatement( "INSERT INTO "+DB2TestUtil.SCHEMA_QUOTED+".\"seq\" VALUES (next value for "+getSquenceNameQuoted()+",'three',NULL)" ).execute();
        
        con.close();
        
    }
    
    @Override
    protected void createNonIncrementingPrimaryKeyTable() throws Exception {
    	Connection con = getDataSource().getConnection();
    	con.prepareStatement("create table "+DB2TestUtil.SCHEMA_QUOTED+
    			".\"noninc\" (\"key\" int not null,\"name\" varchar(255),  \"geom\" DB2GSE.ST_GEOMETRY, primary key (\"key\"))").execute();
    	DB2Util.executeRegister(DB2TestUtil.SCHEMA, "noninc", "geom", DB2TestUtil.SRSNAME, con);
    	
        con.prepareStatement( "INSERT INTO "+DB2TestUtil.SCHEMA_QUOTED+".\"noninc\" VALUES (1,'one',NULL)" ).execute();
        con.prepareStatement( "INSERT INTO "+DB2TestUtil.SCHEMA_QUOTED+".\"noninc\" VALUES (2,'two',NULL)" ).execute();
        con.prepareStatement( "INSERT INTO "+DB2TestUtil.SCHEMA_QUOTED+".\"noninc\" VALUES (3,'three',NULL)" ).execute();
        
        con.close();
    }

    @Override
    protected void createMultiColumnPrimaryKeyTable() throws Exception {
    	Connection con = getDataSource().getConnection();
    	con.prepareStatement("create table "+DB2TestUtil.SCHEMA_QUOTED+
    			".\"multi\" (\"key1\" int not null, \"key2\" varchar(255) not null,\"name\" varchar(255) , \"geom\" DB2GSE.ST_GEOMETRY, primary key (\"key1\",\"key2\"))").execute();
    	DB2Util.executeRegister(DB2TestUtil.SCHEMA, "multi", "geom", DB2TestUtil.SRSNAME, con);
    	
        con.prepareStatement( "INSERT INTO "+DB2TestUtil.SCHEMA_QUOTED+".\"multi\" VALUES (1,'x','one',NULL)" ).execute();
        con.prepareStatement( "INSERT INTO "+DB2TestUtil.SCHEMA_QUOTED+".\"multi\" VALUES (2,'y','two',NULL)" ).execute();
        con.prepareStatement( "INSERT INTO "+DB2TestUtil.SCHEMA_QUOTED+".\"multi\" VALUES (3,'z','three',NULL)" ).execute();
        
        con.close();
    }
    
    @Override
    protected void dropAutoGeneratedPrimaryKeyTable() throws Exception {
    	dropSpatialTable("auto");
    }
    
    @Override
    protected void dropSequencedPrimaryKeyTable() throws Exception {
    	dropSpatialTable("seq");
    	Connection con = getDataSource().getConnection();
    	try {
    		DB2TestUtil.dropSequence(DB2TestUtil.SCHEMA, getSquenceName(), con);
    		
    	} catch (SQLException e) {}	
    	con.close();
    }
    
    @Override
    protected void dropNonIncrementingPrimaryKeyTable() throws Exception {
    	dropSpatialTable("noninc");

    }
    
    @Override
    protected void dropMultiColumnPrimaryKeyTable() throws Exception {
    	dropSpatialTable("multi");
    }

    
    private  void dropSpatialTable(String tableName) throws Exception {
    	Connection con = getDataSource().getConnection();
    	try {
    		DB2Util.executeUnRegister(DB2TestUtil.SCHEMA, tableName, "goem", con);
    		DB2TestUtil.dropTable(DB2TestUtil.SCHEMA, tableName, con);
    	} catch (SQLException e) {    		
    	}
    	
        con.close();
    }
    
    

}
